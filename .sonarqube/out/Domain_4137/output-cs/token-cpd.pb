Ú
ID:\Dev\AspNetCoreTestes\Domain\EventHandlers\ClienteCriadoEventHandler.cs
	namespace 	
Domain
 
. 
EventHandlers 
{ 
public		 

class		 %
ClienteCriadoEventHandler		 *
:		+ ,
IHandle		- 4
<		4 5
ClienteCriadoEvent		5 G
>		G H
{

 
public 
void 
Handle 
( 
ClienteCriadoEvent -
args. 2
)2 3
{ 	
Logger 
. 
Log 
( 
$" >
2Peguei o evento de Cliente Criado. O cliente √© o  J
{J K
argsK O
.O P
ClienteP W
.W X
NomeX \
}\ ]
.] ^
"^ _
)_ `
;` a
} 	
} 
} ≈

ID:\Dev\AspNetCoreTestes\Domain\EventHandlers\PedidoCreatedEventHandler.cs
	namespace 	
Domain
 
. 
EventHandlers 
{ 
public		 

class		 %
PedidoCreatedEventHandler		 *
:		+ ,
IHandle		- 4
<		4 5
PedidoCriadoEvent		5 F
>		F G
{

 
public 
void 
Handle 
( 
PedidoCriadoEvent ,
args- 1
)1 2
{ 	
Logger 
. 
Log 
( 
$" :
.Peguei o Pedido Created Event. Pedido Numero:  G
{G H
argsI M
.M N
PedidoN T
.T U
IdU W
}X Y*
, enviar email para o usuario Y w
{w x
argsy }
.} ~
Pedido	~ Ñ
.
Ñ Ö
Cliente
Ö å
.
å ç
Nome
ç ë
}
í ì
"
ì î
)
î ï
;
ï ñ
DomainEvents 
. 
Raise 
( 
new "#
EmailPedidoEnviadoEvent# :
(: ;
args; ?
.? @
Pedido@ F
.F G
ClienteG N
)N O
)O P
;P Q
} 	
} 
} Ú
ID:\Dev\AspNetCoreTestes\Domain\EventHandlers\UsuarioCriadoEventHandler.cs
	namespace 	
Domain
 
. 
EventHandlers 
{ 
public		 

class		 %
UsuarioCriadoEventHandler		 *
:		+ ,
IHandle		- 4
<		4 5
UsuarioCriadoEvent		5 G
>		G H
{

 
public 
void 
Handle 
( 
UsuarioCriadoEvent -
args. 2
)2 3
{ 	
Logger 
. 
Log 
( 
$" >
2Peguei o evento de Usuario Criado. O usuario √© o  J
{J K
argsK O
.O P
UsuarioP W
.W X
NomeX \
}\ ]
.] ^
"^ _
)_ `
;` a
} 	
} 
} Ø
;D:\Dev\AspNetCoreTestes\Domain\Events\ClienteCriadoEvent.cs
	namespace 	
Domain
 
. 
Events 
{ 
public		 

class		 
ClienteCriadoEvent		 #
:		$ %
IDomainEvent		& 2
{

 
public 
Cliente 
Cliente 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
ClienteCriadoEvent !
(! "
Cliente" )
cliente* 1
)1 2
{ 	
Cliente 
= 
cliente 
; 
} 	
} 
} û
@D:\Dev\AspNetCoreTestes\Domain\Events\EmailPedidoEnviadoEvent.cs
	namespace 	
Domain
 
. 
Events 
{		 
public

 

class

 #
EmailPedidoEnviadoEvent

 (
:

) *
IDomainEvent

+ 7
{ 
public #
EmailPedidoEnviadoEvent &
(& '
Cliente' .
cliente/ 6
)6 7
{ 	
Cliente 
= 
cliente 
; 
} 	
public 
Cliente 
Cliente 
{  
get! $
;$ %
}& '
} 
} ◊
:D:\Dev\AspNetCoreTestes\Domain\Events\PedidoCriadoEvent.cs
	namespace 	
Domain
 
. 
Events 
{ 
public		 

class		 
PedidoCriadoEvent		 "
:		# $
IDomainEvent		% 1
{

 
public 
Pedido 
Pedido 
; 
public 
PedidoCriadoEvent  
(  !
Pedido! '
pedido( .
). /
{ 	
Pedido 
= 
pedido 
; 
} 	
} 
} Ø
;D:\Dev\AspNetCoreTestes\Domain\Events\UsuarioCriadoEvent.cs
	namespace 	
Domain
 
. 
Events 
{ 
public		 

class		 
UsuarioCriadoEvent		 #
:		$ %
IDomainEvent		& 2
{

 
public 
Usuario 
Usuario 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
UsuarioCriadoEvent !
(! "
Usuario" )
usuario* 1
)1 2
{ 	
Usuario 
= 
usuario 
; 
} 	
} 
} É
0D:\Dev\AspNetCoreTestes\Domain\Models\Cliente.cs
	namespace 	
Domain
 
. 
Models 
{ 
public 

class 
Cliente 
: 
Entity !
{ 
public 
string 
Nome 
{ 
get  
;  !
private" )
set* -
;- .
}/ 0
private		 
Cliente		 
(		 
)		 
{

 	
} 	
public 
Cliente 
( 
string 
nome "
)" #
{ 	
new 
Guard 
( 
) 
. 
NotNullOrEmpty 
(  
$str  &
,& '
nome( ,
), -
. 
Validate 
( 
) 
; 
Nome 
= 
nome 
; 
} 	
public 
void 

UpdateInfo 
( 
string %
novoNome& .
). /
{ 	
new 
Guard 
( 
) 
. 
NotNullOrEmpty 
(  
$str  &
,& '
novoNome( 0
)0 1
. 
Validate 
( 
) 
; 
Nome 
= 
novoNome 
; 
} 	
} 
} Ω!
/D:\Dev\AspNetCoreTestes\Domain\Models\Entity.cs
	namespace 	
Domain
 
. 
Models 
{ 
public 

abstract 
class 
Entity  
:! "

IEquatable# -
<- .
Entity. 4
>4 5
{ 
[ 	
JsonProperty	 
( 
Order 
= 
- 
$num  
)  !
]! "
public 
int 
Id 
{ 
get 
; 
	protected &
set' *
;* +
}, -
public 
bool 
Equals 
( 
Entity !
obj" %
)% &
{ 	
var 
	compareTo 
= 
obj 
as  "
Entity# )
;) *
if 
( 
ReferenceEquals 
(  
this  $
,$ %
	compareTo& /
)/ 0
)0 1
return2 8
true9 =
;= >
if 
( 
ReferenceEquals 
(  
null  $
,$ %
	compareTo& /
)/ 0
)0 1
return2 8
false9 >
;> ?
return 
Id 
. 
Equals 
( 
	compareTo &
.& '
Id' )
)) *
;* +
} 	
public 
override 
bool 
Equals #
(# $
object$ *
obj+ .
). /
{ 	
if 
( 
! 
( 
obj 
is 
Entity 
)  
)  !
return 
false 
; 
return 
Equals 
( 
obj 
as  
Entity! '
)' (
;( )
} 	
public   
static   
bool   
operator   #
==  $ &
(  & '
Entity  ' -
a  . /
,  / 0
Entity  1 7
b  8 9
)  9 :
{!! 	
if"" 
("" 
ReferenceEquals"" 
(""  
a""  !
,""! "
null""# '
)""' (
&&"") +
ReferenceEquals"", ;
(""; <
b""< =
,""= >
null""? C
)""C D
)""D E
return## 
true## 
;## 
if%% 
(%% 
ReferenceEquals%% 
(%%  
a%%  !
,%%! "
null%%# '
)%%' (
||%%) +
ReferenceEquals%%, ;
(%%; <
b%%< =
,%%= >
null%%? C
)%%C D
)%%D E
return&& 
false&& 
;&& 
return(( 
a(( 
.(( 
Equals(( 
((( 
b(( 
)(( 
;(( 
})) 	
public++ 
static++ 
bool++ 
operator++ #
!=++$ &
(++& '
Entity++' -
a++. /
,++/ 0
Entity++1 7
b++8 9
)++9 :
{,, 	
return-- 
!-- 
(-- 
a-- 
==-- 
b-- 
)-- 
;-- 
}.. 	
public00 
override00 
int00 
GetHashCode00 '
(00' (
)00( )
{11 	
return22 
(22 
GetType22 
(22 
)22 
.22 
GetHashCode22 )
(22) *
)22* +
*22, -
$num22. 1
)221 2
+223 4
Id225 7
.227 8
GetHashCode228 C
(22C D
)22D E
;22E F
}33 	
public55 
override55 
string55 
ToString55 '
(55' (
)55( )
{66 	
return77 
GetType77 
(77 
)77 
.77 
Name77 !
+77" #
$str77$ +
+77, -
Id77. 0
+771 2
$str773 6
;776 7
}88 	
}99 
}:: Î
4D:\Dev\AspNetCoreTestes\Domain\Models\ItensPedido.cs
	namespace 	
Domain
 
. 
Models 
{ 
public 

class 
ItensPedido 
{		 
public

 
int

 
PedidoId

 
{

 
get

 !
;

! "
private

# *
set

+ .
;

. /
}

0 1
public 
int 
	ProdutoId 
{ 
get "
;" #
private$ +
set, /
;/ 0
}1 2
public 
int 

Quantidade 
{ 
get  #
;# $
private% ,
set- 0
;0 1
}2 3
public 
Produto 
Produto 
{  
get! $
;$ %
private& -
set. 1
;1 2
}3 4
public 
decimal 

PrecoTotal !
=>" $

Quantidade% /
*0 1
Produto2 9
.9 :
Preco: ?
;? @
private 
ItensPedido 
( 
) 
{ 	
} 	
public 
ItensPedido 
( 
Pedido !
pedido" (
,( )
Produto* 1
produto2 9
,9 :
int; >

quantidade? I
)I J
{ 	
new 
Guard 
( 
) 
. 
NotNull 
( 
$str !
,! "
pedido# )
)) *
. 
NotNull 
( 
$str "
," #
produto$ +
)+ ,
. 
GreaterThan 
( 
$str )
,) *

quantidade+ 5
,5 6
$num7 8
)8 9
. 
Validate 
( 
) 
; 
	ProdutoId 
= 
produto 
.  
Id  "
;" #
Produto 
= 
produto 
; 
PedidoId 
= 
pedido 
. 
Id  
;  !

Quantidade   
=   

quantidade   #
;  # $
}!! 	
}## 
}'' £
/D:\Dev\AspNetCoreTestes\Domain\Models\Pedido.cs
	namespace 	
Domain
 
. 
Models 
{ 
public 

class 
Pedido 
: 
Entity  
{ 
public		 
Cliente		 
Cliente		 
{		  
get		! $
;		$ %
private		& -
set		. 1
;		1 2
}		3 4
public

 
IList

 
<

 
ItensPedido

  
>

  !
Itens

" '
{

( )
get

* -
;

- .
private

/ 6
set

7 :
;

: ;
}

< =
public 
decimal 
TotalPedido "
=># %
Itens& +
.+ ,
Sum, /
(/ 0
i0 1
=>2 4
i5 6
.6 7

PrecoTotal7 A
)A B
;B C
private 
Pedido 
( 
) 
{ 	
} 	
public 
Pedido 
( 
Cliente 
cliente %
,% &
IList' ,
<, -
ItensPedido- 8
>8 9
itens: ?
)? @
{ 	
new 
Guard 
( 
) 
. 
NotNull 
( 
$str "
," #
cliente$ +
)+ ,
. 
HasMoreThanOne 
(  
$str  '
,' (
itens) .
). /
. 
Validate 
( 
) 
; 
Cliente 
= 
cliente 
; 
Itens 
= 
itens 
; 
} 	
} 
}  
0D:\Dev\AspNetCoreTestes\Domain\Models\Produto.cs
	namespace 	
Domain
 
. 
Models 
{ 
public 

class 
Produto 
: 
Entity !
{ 
public 
string 
Nome 
{ 
get  
;  !
private" )
set* -
;- .
}/ 0
public 
decimal 
Preco 
{ 
get "
;" #
private$ +
set, /
;/ 0
}1 2
private

 
Produto

 
(

 
)

 
{ 	
} 	
public 
Produto 
( 
string 
nome "
," #
decimal$ +
preco, 1
)1 2
{ 	
new 
Guard 
( 
) 
. 
NotNullOrEmpty 
(  
$str  &
,& '
nome( ,
), -
. 
GreaterThan 
( 
$str $
,$ %
preco& +
,+ ,
$num- .
). /
. 
Validate 
( 
) 
; 
Nome 
= 
nome 
; 
Preco 
= 
preco 
; 
} 	
} 
} Ò
0D:\Dev\AspNetCoreTestes\Domain\Models\Usuario.cs
	namespace 	
Domain
 
. 
Models 
{ 
public 

class 
Usuario 
: 
Entity !
{ 
public 
string 
Nome 
{ 
get  
;  !
set" %
;% &
}' (
private		 
Usuario		 
(		 
)		 
{

 	
} 	
public 
void 
AtualizarNome !
(! "
string" (
novoNome) 1
)1 2
{ 	
new 
Guard 
( 
) 
. 
NotNullOrEmpty 
(  
$str  &
,& '
novoNome( 0
)0 1
. 
Validate 
( 
) 
; 
Nome 
= 
novoNome 
; 
} 	
public 
Usuario 
( 
string 
nome "
)" #
{ 	
new 
Guard 
( 
) 
. 
NotNullOrEmpty 
(  
$str  &
,& '
nome( ,
), -
. 
Validate 
( 
) 
; 
Nome 
= 
nome 
; 
} 	
}!! 
}"" É
ID:\Dev\AspNetCoreTestes\Domain\RepositoryInterfaces\IClienteRepository.cs
	namespace 	
Domain
 
.  
RepositoryInterfaces %
{ 
public 

	interface 
IClienteRepository '
:( )
IRepository* 5
<5 6
Cliente6 =
>= >
{ 
}		 
}

 æ
HD:\Dev\AspNetCoreTestes\Domain\RepositoryInterfaces\IPedidoRepository.cs
	namespace 	
Domain
 
.  
RepositoryInterfaces %
{ 
public 

	interface 
IPedidoRepository &
:' (
IRepository) 4
<4 5
Pedido5 ;
>; <
{		 
IList

 
<

 
Pedido

 
>

 "
ObterPedidosPorCliente

 ,
(

, -
int

- 0
	idCliente

1 :
)

: ;
;

; <
} 
} É
ID:\Dev\AspNetCoreTestes\Domain\RepositoryInterfaces\IProdutoRepository.cs
	namespace 	
Domain
 
.  
RepositoryInterfaces %
{ 
public 

	interface 
IProdutoRepository '
:( )
IRepository* 5
<5 6
Produto6 =
>= >
{ 
} 
}		 ú
BD:\Dev\AspNetCoreTestes\Domain\RepositoryInterfaces\IRepository.cs
	namespace 	
Domain
 
.  
RepositoryInterfaces %
{		 
public

 

	interface

 
IRepository

  
<

  !
TEntity

! (
>

( )
where

* /
TEntity

0 7
:

8 9
Entity

: @
{ 
TEntity 
GetById 
( 
int 
id 
) 
;  
IList 
< 
TEntity 
> 
GetAllBy 
(  

Expression  *
<* +
Func+ /
</ 0
TEntity0 7
,7 8
bool9 =
>= >
>> ?
	predicate@ I
)I J
;J K
PaginatedResults 
< 
TEntity  
>  !
GetAllBy" *
(* +

Expression+ 5
<5 6
Func6 :
<: ;
TEntity; B
,B C
boolD H
>H I
>I J
	predicateK T
,T U
PaginationInputV e
paginationInputf u
)u v
;v w
PaginatedResults 
< 
TEntity  
>  !
GetAll" (
(( )
PaginationInput) 8
paginationInput9 H
)H I
;I J
void 
Update 
( 
TEntity 
entity "
)" #
;# $
void 
Insert 
( 
TEntity 
entity "
)" #
;# $
void 
Delete 
( 
TEntity 
entity "
)" #
;# $
} 
} É
ID:\Dev\AspNetCoreTestes\Domain\RepositoryInterfaces\IUsuarioRepository.cs
	namespace 	
Domain
 
.  
RepositoryInterfaces %
{ 
public 

	interface 
IUsuarioRepository '
:( )
IRepository* 5
<5 6
Usuario6 =
>= >
{ 
} 
}		 